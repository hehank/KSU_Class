#! /usr/bin/env python3
# -*- coding: utf-8 -*-

from base64 import b64decode

MORSE_CODE_DICT = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--',
                   'X': '-..-', 'Y': '-.--', 'Z': '--..', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', '0': '-----', ', ': '--..--', '.': '.-.-.-', '?': '..--..', '/': '-..-.', '-': '-....-', '(': '-.--.', ')': '-.--.-'}

ciphertext = listsplit())
bin_list = []
plaintext = []

count = 0
s = ''


def Morse_decode(message):
    s = ''
    for i in message:
        # ? [k for k, v in MORSE_CODE_DICT.items() if v == i] -> 另一種寫法
        for k, v in MORSE_CODE_DICT.items():
            if v == i:
                s += k

    return s


# ? Turn ZERO & ONE to '0' & '1'
for i in ciphertext:

    if count == 8:
        count = 0
        bin_list.append(s)
        s = ''

    if i == 'ZERO':
        s += '0'
    else:
        s += '1'

    count += 1

# ? binary to ascii
for i in bin_list:
    plaintext.append(chr(int(i, 2)))

# ? base64 decode
b64_str = ''.join(plaintext) + '=='
morse_str = b64decode(b64_str.encode()).decode().split()

# ? morse code decode
output = Morse_decode(morse_str)

# ? replace 'O' to '_' & add '{}'
output = output.replace('O', '_') + '}'
s1 = output[:7] + '{'
output = s1 + output[7:]

print(output)
